[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introdução",
    "section": "",
    "text": "Os dados que consideramos nas aplicações deste livro são baseados em gestantes e puérperas de 10 a 55 anos hospitalizadas com Síndrome Respiratória Aguda Grave (SRAG) por COVID-19, confirmada por teste de PCR, no período de março de 2020 a dezembro de 2021, disponíveis no Sistema de Informação da Vigilância Epidemiológica da Gripe (SIVEP-Gripe), sistema oficial para o registro dos casos e óbitos por SRAG disponibilizado pelo Ministério da Saúde.\nNa base dados_covid estão contidas 11.485 observações e 50 variáveis. Assim, são as características observadas:\n\n\n\n\n\n\n\nVariável\nDescrição\n\n\n\n\nsem_pri\nSemana epidemiológia dos primeiros sintomas.\n\n\nidade_anos\nIdade, em anos, da gestante ou puérpera.\n\n\nsg_uf\nSigla da Unidade Federativa de residência da gestante ou puérpera.\n\n\nid_mn_resi\nMunicípio de residência da gestante ou puérpera.\n\n\nco_mun_res\nCódigo do município de residência da gestante ou puérpera.\n\n\nco_mu_inte\nCódigo do município onde está localizado a Unidade de Saúde onde a gestante ou puérpera internou.\n\n\ndt_sin_pri\nData de primeiros sintomas do caso.\n\n\ndt_evoluca_2\nData da alta ou do óbito da gestante ou puérpera.\n\n\nano\nAno da infecção pelo COVID-19.\n\n\nclassi_gesta_puerp\nIdade gestacional da gestante e puerpério.\n\n\nraca\nRaça da gestante ou puérpera.\n\n\nescol\nNível de escolaridade da gestante ou puérpera.\n\n\nmudou_muni\nSe gestante ou puérpera precisou se deslocar para outro município para realizar atendimento.\n\n\nzona\nTipo de zona de residência da gestante ou puérpera.\n\n\nfaixa_et\nFaixa etária da gestante ou puérpera.\n\n\nhospital\nSe gestante ou puérpera foi hospitalizada.\n\n\nhist_viagem\nSe gestante ou puérpera fez viagem internacional até 14 dias antes do início dos sintomas.\n\n\nsg_para_srag\nSe o caso é proveniente de síndrome gripal (SG) que evoluiu para síndrome respiratória aguda grave (SRAG).\n\n\ninf_inter\nSe trata-se de caso nosocomial (infecção adquirida no hospital).\n\n\ncont_ave_suino\nSe a gestante ou puérpera trabalha ou tem contato direto com aves, suínos ou outros animais.\n\n\nvacina\nSe a gestante ou puérpera recebeu vacina contra influenza.\n\n\nvacina_cov\nSe a gestante ou puérpera recebeu vacina contra COVID-19.\n\n\nantiviral\nSe gestante ou puérpera usou antiviral para gripe e qual antiviral.\n\n\nfebre\nSe gestante ou puérpera manifestou sintoma de febre.\n\n\ntosse\nSe gestante ou puérpera manifestou sintoma de tosse.\n\n\ngarganta\nSe gestante ou puérpera manifestou sintoma de dor de garganta.\n\n\ndispneia\nSe gestante ou puérpera manifestou sintoma de dispneia.\n\n\ndesc_resp\nSe gestante ou puérpera manifestou sintoma de desconforto respiratório.\n\n\nsaturacao\nSe gestante ou puérpera manifestou sintoma de saturação.\n\n\ndiarreia\nSe gestante ou puérpera manifestou sintoma de diarreia.\n\n\nvomito\nSe gestante ou puérpera manifestou sintoma de vômito.\n\n\ndor_abd\nSe gestante ou puérpera manifestou sintoma de dor abdominal.\n\n\nfadiga\nSe gestante ou puérpera manifestou sintoma de fadiga.\n\n\nperd_olft\nSe gestante ou puérpera manifestou sintoma de perda de olfato.\n\n\nperd_pala\nSe gestante ou puérpera manifestou sintoma de perda de paladar.\n\n\ncardiopati\nSe gestante ou puérpera tem doença cardiovascular crônica.\n\n\nhematologi\nSe gestante ou puérpera tem doença hematológica crônica.\n\n\nhepatica\nSe gestante ou puérpera tem doença hepática crônica.\n\n\nasma\nSe gestante ou puérpera tem asma.\n\n\ndiabetes\nSe gestante ou puérpera tem diabetes mellitus.\n\n\nneuro\nSe gestante ou puérpera tem doença neurológica.\n\n\npneumopati\nSe gestante ou puérpera tem outra pneumopatia crônica.\n\n\nimunodepre\nSe gestante ou puérpera tem imunodeficiência ou imunodepressão (diminuição da função do sistema imunológico).\n\n\nrenal\nSe gestante ou puérpera tem doença renal crônica.\n\n\nobesidade\nSe gestante ou puérpera tem obesidade.\n\n\nuti\nSe gestante ou puérpera foi internada na UTI.\n\n\nsuport_ven\nSe gestante ou puérpera precisou de ventilação mecânica; se sim, se foi invasiva ou não.\n\n\nevolucao\nEvolução do caso da gestante ou puérpera.\n\n\nvariante\nVariante do vírus SARS-CoV-2 (vírus do COVID-19)."
  },
  {
    "objectID": "tutorialr.html",
    "href": "tutorialr.html",
    "title": "Tutorial de R",
    "section": "",
    "text": "R é um ambiente computacional e uma linguagem de programação para manipulação, análise e visualização de dados. É considerado um dos melhores ambiente computacional para essa finalidade. O R é mantido pela R Development Core Team e está disponível para diferentes sistemas operacionais: Linux, Mac e Windows.\nO software é livre, ou seja, gratuito, com código aberto em uma linguagem acessível. Nele, estão implementadas muitas metodologias estatísticas. Muitas dessas fazem parte do ambiente base de R e outras acompanham o ambiente sob a forma de pacotes, o que torna o R altamente expansível. Os pacotes são bibliotecas com dados e funções para diferentes áreas do conhecimento relacionados à estatística e áreas afins, devidamente documentados.\nO R possui uma comunidade extremamente ativa, engajada desde o aprimoramento de ferramentas e desenvolvimento de novas bibliotecas, até o suporte aos usuários. Sobre o desenvolvimento de novas bibliotecas, um pesquisador em Estatística que desenvolve um novo modelo estatístico pode disponibilizá-lo em um pacote acessível a que se interessam pelo modelo.\nAlém disso, a disponibilidade e compartilhamento da pesquisa em um pacote no R é uma boa prática quando falamos de reprodutibilidade na Ciência. Ainda nesse ponto, realizar as análises de uma pesquisa aplicada em um programa livre e acessível a todos é um dos principais pontos para permitir reprodutibilidade.\nAo optar por programar em R também implica na escolha de uma IDE (Integrated Development Environment) que, na grande maioria dos casos, será o RStudio. O RStudio é um conjunto de ferramentas integradas projetadas para editar e executar os códigos em R. Assim, quando for o interesse utilizar o R, só precisa abrir o RStudio (R é automaticamente carregado).\nPara instalação do R e do RStudio, veja a Seção que segue."
  },
  {
    "objectID": "instalar.html",
    "href": "instalar.html",
    "title": "2  Instalação R",
    "section": "",
    "text": "2.0.1 Para Windows\nOs passos para instalar o R quando o sistema operacional é Windows são os seguintes:\n\nEntre neste link para acessar a página do R e clique em Download, como no link destacado em retângulo vermelho na Figura @ref(fig:windows1). Note que o 3.6.1 é o número da versão mais recente disponível no momento da construção desse material (5/7/19).\n\n\n\n\n\n\nDownload R para Windows\n\n\n\n\n\nSalve o arquivo de instalação em algum caminho de interesse do seu computador. Por exemplo, na Figura @ref(fig:windows2) mostra que a pasta é “Downloads”.\n\n\n\n\n\n\nInstalador\n\n\n\n\n\nClique duas vezes com o botão esquerdo no instalador para iniciar a instalação. O próximo passo é escolher a língua para instalação. Na Figura @ref(fig:windows3) abaixo é português.\n\n\n\n\n\n\nEscolha da lingua para instalação\n\n\n\n\n\nClique em “Próximo” nas próximas janelas, como nas Figuras @ref(fig:windows4) a @ref(fig:windows9).\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\n\n\n\n\nPróximo\n\n\n\n\n\nPronto, agora o software R será instalado, como na Figura @ref(fig:windows10). Quando terminar, aparecerá uma janela como apresentado na Figura @ref(fig:windows11).\n\n\n\n\n\n\nInstalação do R\n\n\n\n\n\n\n\n\n\nPronto: R instalado\n\n\n\n\n\n\n2.0.2 Para MAC\nOs passos para instalar o R quando o sistema operacional é OS X (Mac) são os seguintes:\n\nEntre no site e clique em Download R for (MAC) OS X, conforme destacado abaixo em retângulo vermelho na Figura @ref(fig:mac1).\n\n\n\n\n\n\n Download R para Mac\n\n\n\n\n\nBaixe o pacote R-3.6.1.pkg clicando no link indicado no retângulo vermelho na Figura @ref(fig:mac2). Note que o 3.6.1 é o número da versão mais recente disponível no momento da confecção deste material.\n\n\n\n\n\n\n Download R para Mac\n\n\n\n\n\nCaso você não tenha configurado a pasta de descargas, o pacote será baixado na pasta “Downloads”, como mostrado na seguinte Figura @ref(fig:mac3). Observe que dois arquivos são baixados, clique duas vezes no arquivo “R-3.6.1.pkg” para abrir o assistente de instalação que o guiará durante o processo.\n\n\n\n\n\n\n Pasta para instalação\n\n\n\n\n\nAcompanhe os passos indicados pelo instalador (Figura @ref(fig:mac4)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nDeve concordar com os termos da licença, clique em “Agree” (Figura @ref(fig:mac5)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nSelecione o lugar onde instalará o programa, no caso de ter o disco particionado e assim desejar instalar em uma parte específica. Caso contrário, continue (Figura @ref(fig:mac6) e @ref(fig:mac7)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPara finalizar a instalação, o assistente lhe pedirá nome de usuário e senha do seu notebook, como apresentado na Figura @ref(fig:mac8).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto, agora o software R será instalado, como na Figura @ref(fig:mac9). Quando terminar, aparecerá uma janela como apresentado na Figura @ref(fig:mac10).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n2.0.3 Para Linux\nA instalação do R no Linux depende da distribuição utilizada. Entre neste link para acessar a página do R e clique em Download R for Linux, como no link destacado em retângulo vermelho na Figura @ref(fig:linux1). Em seguida, clique no link referente à distribuição utilizada (Figura @ref(fig:linux2)).\n\n\n\n\n\nDownload em Linux\n\n\n\n\n\n\n\n\n\nDownload em Linux"
  },
  {
    "objectID": "instalarstudio.html",
    "href": "instalarstudio.html",
    "title": "3  Instalação RStudio",
    "section": "",
    "text": "3.0.1 Para Windows\n\nEntre neste link e clique em Download como em destaque na Figura @ref(fig:rswindows1).\n\n\n\n\n\n\nSite para download do RStudio\n\n\n\n\n\nClique no instalador em destaque na Figura @ref(fig:rswindows2).\n\n\n\n\n\n\nLink para download do RStudio\n\n\n\n\n\nAo clicar no link, será feito o download do instalador e salvo na pasta de interesse. No caso da Figura @ref(fig:rswindows3), o instalador está na pasta Downloads. Dê dois cliques no botão esquerdo no arquivo para iniciar o download do arquivo.\n\n\n\n\n\n\n Instalador\n\n\n\n\n\nClique em “Próximo” nas próximas janelas e na última “Instalar”, como nas Figuras @ref(fig:rswindows4) a @ref(fig:rswindows6).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto, a instalação será iniciada, como na Figura @ref(fig:rswindows7).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n3.0.2 Para MAC\n\nEntre neste link e clique em Download como em destaque na Figura @ref(fig:rsmac1).\n\n\n\n\n\n\nSite para download do RStudio\n\n\n\n\n\nClique no instalador como destacado na Figura @ref(fig:rsmac2).\n\n\n\n\n\n\nSite para download do RStudio para Mac\n\n\n\n\n\nAo clicar no link, será feito o download do instalador e salvo na pasta de interesse. Caso você não tenha configurado a pasta de descargas, o instalador ficará na pasta “Downloads”, como na Figura @ref(fig:rsmac3).\n\n\n\n\n\n\n Instalador salvo em pasta\n\n\n\n\n\nClicando duas vezes no arquivo “RStudio-1.2.1335.dmg” (versãos mais atual do RStudio), será feita a descarga do mesmo abrindo a janela conforme na Figura @ref(fig:rsmac4). Clique no aplicativo de RStudio destacado em vermelho também na Figura @ref(fig:rsmac4).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nO instalador pode perguntar se está seguro que o aplicativo será baixado da internet e clique em “Open” (Figura @ref(fig:rsmac5)).\n\n\n\n\n\n\n Instalação\n\n\n\n\n\nPronto! Imediatamente abre o RStudio, como na Figura @ref(fig:rsmac6), e você já pode utilizá-lo.\n\n\n\n\n\n\n Instalação\n\n\n\n\n\n\n3.0.3 Para Linux\n\nEntre neste link e clique em Download como em destaque na Figura @ref(fig:rslinux1).\n\n\n\n\n\n\nSite para download do RStudio\n\n\n\n\n\nClique no link referente à distribuição utilizada (Figura @ref(fig:rslinux2)).\n\n\n\n\n\n\n Download do RStudio"
  },
  {
    "objectID": "comecando_rstudio.html",
    "href": "comecando_rstudio.html",
    "title": "4  Primeiros passos no RStudio",
    "section": "",
    "text": "Tem quatro áreas, conforme a Figura @ref(fig:telarstudio1).\n\n\n\n\n\n Visualização do RStudio\n\n\n\n\nA seguir descrevemos melhor os painéis e abas do RStudio:\n\nEditor/Scripts: é onde escrever os códigos. Arquivos do tipo .R.\nConsole: executar os comandos e ver os resultados.\nEnviroment: painel com todos os objetos criados.\nHistory: história dos comandos executados.\nFiles: navegar em pastas e arquivos.\nPlots: onde os gráficos serão apresentados.\nPackages: pacotes instalados (sem ticar) e habilitados (ticados).\nHelp: retorna o tutorial de ajuda do comando solicitado com help() ou ?comando. Ver melhor como pedir ajuda no R no final deste capítulo.\n\nO usuário pode alterar a aparência do RStudio, como fonte e cor. Como exemplo, as Figuras @ref(fig:telarstudio2) e @ref(fig:telarstudio3) apresentam os passos para mudar o tema do script. No exemplo, deixar com fundo preto.\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\nAinda no menu Tools –> Global Options –> Pane Layout, o usuário pode organizar a ordem dos quadrantes do RStudio, como apresentado nas Figuras @ref(fig:telarstudio4), @ref(fig:telarstudio5) e @ref(fig:telarstudio6). No exemplo, o painel Console foi transferido para o lado do painel Script, o que facilita a visualização dos comandos rodados.\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n\n\n\n\n Ferramentas de aparência do RStudio\n\n\n\n\n\n4.0.1 Projetos\nUma funcionalidade importante é a criação de projetos, permitindo dividir o trabalho em múltiplos ambientes, cada um com o seu diretório, documentos e workspace.\nPara criar um projeto, os seguintes passos podem ser seguidos:\n\nClique na opção “File” do menu, e então em “New Project”.\nClique em “New Directory”.\nClique em “New Project”.\nEscreva o nome do diretório (pasta) onde deseja manter seu projeto, exemplo: “my_project”.\nClique no botão “Create Project”.\n\nPara criar um novo script para escrever os códigos, vá em File -> New File -> R Script\n\n\n4.0.2 Boas práticas\nComente bem o seu código: é possível fazer comentários usando o símbolo ‘#’. É sempre bom explicar o que uma variável armazena, o que uma função faz, por que alguns parâmetros são passados para uma determinada função, qual é o objetivo de um trecho de código etc.\nEvite linhas de código muito longas: usar linhas de código mais curtas ajuda na leitura do código.\nEscreva um código organizado. Por exemplo, adote um padrão no uso de minúsculas e maiúsculas, uma lógica única na organização de pastas e arquivos, pode ser adotada uma breve descrição (como comentário) indicando o que um determinado script faz.\nCarregue todos os pacotes que irá usar sempre no início do arquivo: quando alguém abrir o seu código será fácil identificar quais são os pacotes que devem ser instalados e quais dependências podem existir."
  },
  {
    "objectID": "comecando_r.html",
    "href": "comecando_r.html",
    "title": "5  Primeiros passos no R",
    "section": "",
    "text": "Posso escrever o código no Script e submetê-lo ao apertar o botão “Run” ou com o atalho no teclado Cmd/Ctrl+Enter."
  },
  {
    "objectID": "comecando_r.html#r-como-calculadora",
    "href": "comecando_r.html#r-como-calculadora",
    "title": "5  Primeiros passos no R",
    "section": "5.1 R como calculadora",
    "text": "5.1 R como calculadora\n\nOperadores\n\n\n#adição\n10+15\n\n[1] 25\n\n#subtração\n10-2\n\n[1] 8\n\n#multiplicação\n2*10\n\n[1] 20\n\n#divisão\n30/2\n\n[1] 15\n\n#raiz quadrada\nsqrt(4)\n\n[1] 2\n\n#potência\n2^2\n\n[1] 4\n\n\nSe você digitar um comando incompleto, como 10 *, o R mostrará um +. Isso não tem a ver com a soma e apenas que o R está esperando você completar seu comando. Termine seu comando ou aperte Esc para recomeçar.\nVale também ressaltar que se você digitar um comando que o R não reconhece, ele retornará uma mensagem de erro e você pode digitar outro comando normalmente em seguida."
  },
  {
    "objectID": "comecando_r.html#atribuição",
    "href": "comecando_r.html#atribuição",
    "title": "5  Primeiros passos no R",
    "section": "5.2 Atribuição",
    "text": "5.2 Atribuição\nPodemos salvar valores dentro de um objeto, que é simplemente um nome que guarda um valor, vetor, matriz, lista ou base de dados.\nPara atribuir a um objeto, o sinal de atribuição é = ou <- (preferível).\nExemplos:\n\nx <- 10/2\nx\n\n[1] 5\n\nX\n\nError in eval(expr, envir, enclos): object 'X' not found\n\n\nPor que tivemos um erro acima?\nO R é case sensitive, isto é, faz a diferenciação entre as letras minúsculas e maiúsculas. Portanto, x é diferente de X."
  },
  {
    "objectID": "comecando_r.html#objetos-em-r",
    "href": "comecando_r.html#objetos-em-r",
    "title": "5  Primeiros passos no R",
    "section": "5.3 Objetos em R",
    "text": "5.3 Objetos em R\nExistem cinco classes básicas no R:\n\ncharacter: “UAH!”\nnumeric: 0.95 (números reais)\ninteger: 100515 (inteiros)\ncomplex: 2 + 5i (números complexos, a + bi)\nlogical: TRUE (booleanos, TRUE/FALSE)\n\nVamos atribuir a x a string banana.\n\nx <- banana \n\nError in eval(expr, envir, enclos): object 'banana' not found\n\nx <- \"banana\"\nx\n\n[1] \"banana\"\n\n\nO primeiro caso (x <- banana) não deu certo, pois ele entendeu que estamos atribuindo a x outro objeto banana, que não foi declarado. Para atribuir o string banana a x, precisamos colocar entre aspas ou aspas simples. Uma string sem aspas é entendido como um objeto, veja abaixo:\n\nbanana <- 30\nx <- banana\nx\n\n[1] 30\n\n\nPara saber a classe de um objeto, use a função class().\n\ny <- \"ola\"\nclass(y)\n\n[1] \"character\"\n\nx <- 2.5\nclass(x)\n\n[1] \"numeric\"\n\n\n\n5.3.1 Apagar objetos\nE se eu quiser apagar um objeto?\n\nx <- 20\nx\n\n[1] 20\n\nremove(x)\nx\n\nError in eval(expr, envir, enclos): object 'x' not found\n\n\nE se eu quiser limpar o console - apaga todos os objetos atribuídos até aqui:\n\nrm(list=ls())"
  },
  {
    "objectID": "comecando_r.html#vetores",
    "href": "comecando_r.html#vetores",
    "title": "5  Primeiros passos no R",
    "section": "5.4 Vetores",
    "text": "5.4 Vetores\nComo atribuir vários valores a um objeto? Para entrar com vários números (ou nomes, ou qualquer outro grupo de coisas), precisamos usar uma função para dizer ao programa que os valores serão combinados em um único vetor.\n\nx <- c(2,3,4)\nx\n\n[1] 2 3 4\n\ny <- seq(1,10)\ny\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nz <- rep(1,10)\nz\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\na <- 1:10\na\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nbicho <-c(\"macaco\",\"pato\",\"galinha\",\"porco\")\nbicho\n\n[1] \"macaco\"  \"pato\"    \"galinha\" \"porco\"  \n\n\nE se quisermos visualizar o conteúdo da posição 2 no vetor bicho?\n\nbicho[2]\n\n[1] \"pato\"\n\n\nAs operações vetoriais podem ser realizadas de maneira bastante intuitiva. Como exemplos:\n\nx <- c(2,3,4)\nx\n\n[1] 2 3 4\n\nops <- x-1\nops\n\n[1] 1 2 3\n\nk <- x*2\nk\n\n[1] 4 6 8\n\n\nVamos agora considerar um vetor de pesos em kg e altura em metros de 6 pessoas.\n\npeso <- c(62, 70, 52, 98, 90, 70)\npeso\n\n[1] 62 70 52 98 90 70\n\naltura <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)\naltura\n\n[1] 1.70 1.82 1.75 1.94 1.84 1.61\n\n\nVale mencionar que o separador de decimais no R é . (ponto)!\nComo calcularia o IMC? Lembrando que o IMC é dado pelo peso (em kg) dividido pela altura (em metros) ao quadrado.\n\nimc <- peso/(altura^2)\nimc\n\n[1] 21.45329 21.13271 16.97959 26.03890 26.58318 27.00513\n\n\nPara saber o tamanho do vetor, use a função length().\n\nlength(imc)\n\n[1] 6"
  },
  {
    "objectID": "comecando_r.html#matrizes",
    "href": "comecando_r.html#matrizes",
    "title": "5  Primeiros passos no R",
    "section": "5.5 Matrizes",
    "text": "5.5 Matrizes\nMatrizes são vetores numéricos com duas dimensões, que são simplesmente a linha e a coluna às quais o elemento pertence.\n\nx <- matrix(seq(1,16), nrow=4,ncol=4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nNote que os números de 1 a 16 foram dispostos na matriz coluna por coluna ou seja, preenchendo de cima para baixo e depois da esquerda para a direita.\nComo sei qual elemento está na segunda linha e terceira coluna da matriz x?\n\nx[2,3]\n\n[1] 10\n\nx[3,  ]   # seleciona a 3ª linha\n\n[1]  3  7 11 15\n\nx[ , 2]   # seleciona a 2ª coluna\n\n[1] 5 6 7 8\n\nx[1, 2]   # seleciona o elemento da primeira linha e segunda coluna\n\n[1] 5\n\n\nE se eu quiser substituir a primeira linha por (13,15,19,30)?\n\nx[1,] <- c(13,15,19,30)\n\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]   13   15   19   30\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nSeja o vetor d:\n\nd <- c(128,124,213,234)\n\nE se quisermos substituir a terceira coluna por d?\n\nx[,3] <- d\n\nQual a dimensão da matriz x?\nVimos que para vetor usamos o comando length(). Serve para matriz também? Vamos testar!\n\nlength(x)\n\n[1] 16\n\n\nNote que retorna o número de colunas vezes o número de linhas (4*4=16). Mas o que quero saber é o numero de linhas e de colunas. Para isso, o comando é dim().\n\ndim(x)\n\n[1] 4 4\n\n\nPara concatenar linhas em uma matriz, podemos usar o comando rbind():\n\nvet <- c(2,20,12,34)\nx2 <- rbind(x,vet)\nx2\n\n    [,1] [,2] [,3] [,4]\n      13   15  128   30\n       2    6  124   14\n       3    7  213   15\n       4    8  234   16\nvet    2   20   12   34\n\n\nPara concatenar colunas em uma matriz, podemos usar o comando cbind():\n\nv2 <- c(25,10,15,4) \nx3 <- cbind(x,v2)\nx3\n\n                  v2\n[1,] 13 15 128 30 25\n[2,]  2  6 124 14 10\n[3,]  3  7 213 15 15\n[4,]  4  8 234 16  4"
  },
  {
    "objectID": "comecando_r.html#fatores",
    "href": "comecando_r.html#fatores",
    "title": "5  Primeiros passos no R",
    "section": "5.6 Fatores",
    "text": "5.6 Fatores\nFatores podem ser vistos como vetores de inteiros que possuem rótulos (labels). Eles são úteis para representar uma variável categórica (nominal e ordinal).\n\nsexo <- c(\"M\", \"H\", \"H\", \"H\", \"M\", \"M\", \"H\")\nsex <- as.factor(sexo)\nsex\n\n[1] M H H H M M H\nLevels: H M\n\nlevels(sex)\n\n[1] \"H\" \"M\""
  },
  {
    "objectID": "comecando_r.html#data-frame",
    "href": "comecando_r.html#data-frame",
    "title": "5  Primeiros passos no R",
    "section": "5.7 Data frame",
    "text": "5.7 Data frame\nTrata-se de uma “tabela de dados” onde as colunas são as variáveis e as linhas são os registros. Essas colunas podem ser de classes diferentes.\nEssa é a grande diferença entre data.frame’s e matrizes (matriz é só numerica).\nPosso criar um data frame no R com os vetores, por exemplo:\n\nID <- seq(1,6)\npes <- c(62, 70, 52, 98, 90, 70)\nalt <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)\nimc <- pes/(alt^2)\ndados <- data.frame(ID=ID,peso=pes,altura=alt, imc=imc)\ndados\n\n  ID peso altura      imc\n1  1   62   1.70 21.45329\n2  2   70   1.82 21.13271\n3  3   52   1.75 16.97959\n4  4   98   1.94 26.03890\n5  5   90   1.84 26.58318\n6  6   70   1.61 27.00513\n\n\nPosso pensar que o data frame tem a mesma ideia de matriz. Quero olhar os dados de altura, que sei que está na coluna 3.\n\ndados[,3]\n\n[1] 1.70 1.82 1.75 1.94 1.84 1.61\n\n\nMas existe uma maneira mais fácil de selecionar a variável de interesse sem ter que saber em qual coluna ela está.\nPor ser um data frame, posso usar $ da seguinte maneira:\n\ndados$altura\n\n[1] 1.70 1.82 1.75 1.94 1.84 1.61\n\n\nPutz, esqueci de colocar a variável de grupo no data frame. Tenho que criar tudo de novo? Não:\n\ngr <- c(rep(1,3),rep(2,3))\ndados$grupo <- gr\n\ndados\n\n  ID peso altura      imc grupo\n1  1   62   1.70 21.45329     1\n2  2   70   1.82 21.13271     1\n3  3   52   1.75 16.97959     1\n4  4   98   1.94 26.03890     2\n5  5   90   1.84 26.58318     2\n6  6   70   1.61 27.00513     2\n\n\nVeja que no “dados$grupo” foi inserido o objeto “gr”. Se “gr” não tivesse o mesmo número de linhas do data frame retornaria um erro.\nFunções úteis para data.frame:\nAinda não falamos com muito detalhes sobre funções no R, faremos isso mais adiante. Mas por enquanto, considere que sejam nomes já salvos no R e que, ao colocar o objeto da base de dados (no nosso exemplo é dados) dentro dos parênteses, retorna algumas informações úteis sobre a base de dados. São algumas delas:\n\nhead() - Mostra as primeiras 6 linhas.\ntail() - Mostra as últimas 6 linhas.\ndim() - Número de linhas e de colunas.\nnames() - Os nomes das colunas (variáveis).\nstr() - Estrutura do data.frame. Mostra, entre outras coisas, as classes de cada coluna.\n\n\nhead(dados)\n\n  ID peso altura      imc grupo\n1  1   62   1.70 21.45329     1\n2  2   70   1.82 21.13271     1\n3  3   52   1.75 16.97959     1\n4  4   98   1.94 26.03890     2\n5  5   90   1.84 26.58318     2\n6  6   70   1.61 27.00513     2\n\ndim(dados)\n\n[1] 6 5\n\nnames(dados)\n\n[1] \"ID\"     \"peso\"   \"altura\" \"imc\"    \"grupo\" \n\nstr(dados)\n\n'data.frame':   6 obs. of  5 variables:\n $ ID    : int  1 2 3 4 5 6\n $ peso  : num  62 70 52 98 90 70\n $ altura: num  1.7 1.82 1.75 1.94 1.84 1.61\n $ imc   : num  21.5 21.1 17 26 26.6 ...\n $ grupo : num  1 1 1 2 2 2"
  },
  {
    "objectID": "comecando_r.html#operadores-lógicos",
    "href": "comecando_r.html#operadores-lógicos",
    "title": "5  Primeiros passos no R",
    "section": "5.8 Operadores lógicos",
    "text": "5.8 Operadores lógicos\nA operação lógica nada mais é do que um teste que retorna verdadeiro (TRUE) ou falso (FALSE). Esses dois valores recebem uma classe especial: logical.\n\nIgual a: ==\n\nVamos testar se um valor é igual ao outro.\nExemplo:\n\n10==11\n\n[1] FALSE\n\n11==11\n\n[1] TRUE\n\n\nNo primeiro retornou FALSE, pois realmente 10 não é igual a 11 e no segundo caso acima retornou TRUE, pois realmente 11 é igual a 11.\nDe maneira análoga funciona para os operadores abaixo:\n\nDiferente de: !=\n\nExemplo:\n\n10!=11\n\n[1] TRUE\n\n\n\nMaior que: >\nMaior ou igual: >=\nMenor que: <\nMenor ou igual: <=\n\nExemplos:\n\n10>5\n\n[1] TRUE\n\n10>=10\n\n[1] TRUE\n\n4<4\n\n[1] FALSE\n\n4<=4\n\n[1] TRUE\n\n\n\nUm outro operador muito útil é o %in%. Com ele, podemos verificar se um valor está dentro de um vetor.\n\n\nex <- 1:15\n3 %in% ex\n\n[1] TRUE\n\n\n\nE: & - será verdadeiro se os dois forem TRUE.\n\n\nx <- 15\nx > 10 & x < 30\n\n[1] TRUE\n\nx < 10 & x < 30\n\n[1] FALSE\n\n\n\nOU: | - será verdadeiro se um dos dois forem TRUE.\n\n\nx <- 15\nx > 10 | x < 30\n\n[1] TRUE\n\nx < 10 | x < 30\n\n[1] TRUE\n\n\n\nNegação: !\n\n\nx <- 15\n!x<30\n\n[1] FALSE"
  },
  {
    "objectID": "comecando_r.html#dados-faltantes-infinitos-e-indefinições-matemáticas",
    "href": "comecando_r.html#dados-faltantes-infinitos-e-indefinições-matemáticas",
    "title": "5  Primeiros passos no R",
    "section": "5.9 Dados faltantes, infinitos e indefinições matemáticas",
    "text": "5.9 Dados faltantes, infinitos e indefinições matemáticas\n\nNA (Not Available): dado faltante/indisponível. Exemplo:\n\n\nx <- c(1,6,9)\nx[4]\n\n[1] NA\n\n\nRetornou NA porque não há elemento na posição 4 do vetor x.\n\nNaN (Not a Number): indefinições matemáticas. Como 0/0 e log(-1). Exemplo:\n\n\nlog(-10)\n\n[1] NaN\n\n\n\nInf (Infinito): número muito grande ou o limite matemático. Aceita sinal negativo (-Inf). Exemplo:\n\n\n10^14321\n\n[1] Inf"
  },
  {
    "objectID": "comecando_r.html#condicionamento-if-e-else",
    "href": "comecando_r.html#condicionamento-if-e-else",
    "title": "5  Primeiros passos no R",
    "section": "5.10 Condicionamento: If e else",
    "text": "5.10 Condicionamento: If e else\nAs estruturas if e else servem para executar um código apenas se uma condição (teste lógico) for satisfeita.\n\na <- 224\nb <- 225\nif (a==b) { \n  v <- 10\n} else {\n  v <- 15\n  }\nv\n\n[1] 15\n\n\nVeja que o R só executa o conteúdo das chaves {} se a expressão dentro dos parênteses () retornar TRUE.\nNote que a condição de igualdade é representada por dois iguais (==). Como dito anteriormente, apenas um igual (=) é símbolo de atribuição (preferível <-).\nVeja outro exemplo:\n\na <- 224\nb <- 225\nif (a==b) { \n  v <- 10\n} else if (a > b) {\n  v <- 15\n  } else {\n    v <- 25\n    }\nv\n\n[1] 25\n\n\nVeja que nesse exemplo gostaria de usar mais de duas condições, e por isso usamos a estrutura intermediária else if."
  },
  {
    "objectID": "comecando_r.html#iterador-for",
    "href": "comecando_r.html#iterador-for",
    "title": "5  Primeiros passos no R",
    "section": "5.11 Iterador for",
    "text": "5.11 Iterador for\nO for serve para repetir uma mesma tarefa para um conjunto de valores diferentes. Cada repetição é chamada de iteração.\nComo exemplo, considere o vetor atribuído ao objeto m como segue:\n\nm <- c(1,20,50,60,100)\n\nQuero criar um novo vetor, p digamos, que seja formado por cada elemento de m dividido por sua posição.\n\np <- NULL\nfor (i in 1: length(m)){\n  p[i] <- m[i]/i\n}\np\n\n[1]  1.00000 10.00000 16.66667 15.00000 20.00000\n\n\nNote que primeiro definimos o objeto p, recebendo NULL. O NULL representa a ausência de um objeto e serve para já declarar algum objeto que receberá valor na sequência. No caso, ao rodar o for, o p é um vetor de tamanho 5 (tamanho do vetor m).\nNo exemplo, temos 5 iterações e para cada valor de i, correndo de 1 até 5 (tamanho de m), pegamos o valor de m na posição i e dividimos por sua posição. Assim, formamos o vetor p."
  },
  {
    "objectID": "comecando_r.html#funções",
    "href": "comecando_r.html#funções",
    "title": "5  Primeiros passos no R",
    "section": "5.12 Funções",
    "text": "5.12 Funções\nFunções no R são nomes que guardam um código de R. A ideia é que sempre que rodar a função com os seus argumentos, o código que ela guarda será executado e o resultado será retornado.\nJá usamos anteriormente algumas funções que estão na base do R. Por exemplo, quando usamos class() para entender a classe do objeto que o R está entendendo. Colocamos um argumento dentro do parênteses e o R retornou qual a classe do objeto em questão. Relembre o que falamos ao perguntar ao R qual a classe do vetor oi criado:\n\noi <- c(10,20,2,1,0.5)\nclass(oi)\n\n[1] \"numeric\"\n\n\nAgora vamos conversar sobre outra função já criada e disponibilizada na base do R: mean. Essa função retorna a média do vetor que está em seu argumento. Vamos calcular a média dos valores do vetor oi:\n\nmean(oi)\n\n[1] 6.7\n\n\nConsidere que, por algum motivo, tenha no vetor oi uma observação faltante. No R, dado faltante é caracterizado por NA.\n\noi <- c(10,20,2,1,0.5,NA)\n\nPerceba que, apesar de NA ser um texto, não coloquei entre aspas porque quero falar para o R que naquela posição não tem valor e o R entende isso ao ler NA (sem aspas). Se colocar entre aspas, ele entenderá como sendo um texto e não mais como valor faltante.\n\nmean(oi)\n\n[1] NA\n\n\nComo não sabemos o valor do elemento na posição 6 do vetor oi, o R não teria como calcular a média de todos os 6 valores e por isso devolve NA. No entanto, queremos calcular a média dos elementos de oi ao retirar os valores faltantes, ou seja, queremos fazer: (10+20+2+1+0.5)/5. Então devemos falar para o R o que queremos, e para isso podemos utilizar o argumento na.rm = TRUE:\n\nmean(oi,na.rm = TRUE)\n\n[1] 6.7\n\n\nImportantes:\n\nSe a função tiver mais de um argumento, eles são sempre separados por vírgulas;\nCada função tem os seus próprios argumentos. Para saber quais são e como usar os argumentos de uma função, basta acessar a sua documentação. Uma forma de fazer isso é pela função help, cujo argumento é o nome da função que precisa de ajuda:\n\n\nhelp(mean)\n\nVeja que abrirá a documentação sobre a função mean no menu “Help” do RStudio, e lá é possível ver os argumentos e exemplos de uso da função em questão.\nAinda sobre funções já presentes no R, vamos considerar agora a função sample. Veja a documentação dessa função para ver o que ela faz:\n\nhelp(sample)\n\nA função sample retorna uma amostra de um vetor com tamanho especificado em um de seus argumentos com ou sem reposição. Ela apresenta quatro argumentos: sample(x, size, replace = FALSE, prob = NULL), em que: x é o vetor do qual será amostrado o número de elementos especificado no argumento size, seja com ou sem reposição (argumento replace) e com dadas probabilidades de seleção, especificadas em prob.\nQuero usar essa função para amostrar do objeto oi (x=oi) dois elementos (size=2) em uma seleção com reposição (replace = TRUE) e que a probabilidade de seleção seja a mesma para todos os elementos do vetor oi. No caso da probabilidade, como podemos ver na documentação da função sample, o default (padrão se o usuário não mudar o argumento) é ser a mesma probabilidade de seleção para todos os elementos. Assim, se o usuário nada especificar para esse argumento, o R entenderá o seu default. O mesmo vale para o argumento replace: caso fosse o interesse fazer a seleção sem reposição, não precisaríamos colocar esse argumento porque seu default é FALSE.\n\n\n\n\nsample(x=oi,size=2,replace=TRUE) #não colocamos argumento prob porque vamos usar o seu default (probs iguais).\n\n[1]  2 20\n\n\nTambém poderíamos usar a mesma função sem colocar o nome dos argumentos:\n\nsample(oi,2,TRUE) \n\n[1] 1 1\n\n\nMas, nesse caso, é importante que se respeite a ordem dos argumentos: o vetor tem que ser o primeiro, o segundo argumento é size e assim por diante.\nVale ressaltar que as duas últimas saídas não necessariamente serão as mesmas, porque é feito um sorteio aleatório de dois elementos de oi em cada uma delas.\nAlém de usar funções já prontas, podemos criar novas funções. Suponha que queremos criar uma função de dois argumentos que retorna o primeiro mais três vezes o segundo argumento. Criamos a função no que segue:\n\nf_conta <- function(x,y) {\n  out <- x+3*y\n  return(out)\n}\n\nA função acima tem:\n\no nome: f_conta;\nos argumentos: x e y;\no corpo out: <- x+3*y; e\no que retorna: return(out).\n\nSuponha que eu queira fazer a conta 10+3*20. Podemos fazer isso ao chamar a função criada f_conta.\n\nf_conta(x=10,y=20)\n\n[1] 70\n\n\nVeja que o cálculo acima retorna exatamente o mesmo que o seguinte:\n\nf_conta(y=20,x=10)\n\n[1] 70\n\n\nIsso acontece porque mudei a ordem dos argumentos, mas acompanhado com os nomes dos argumentos. Se eu não quiser colocar os nomes dos argumentos, precisa tomar cuidado para não errar a ordem deles. Pois:\n\nf_conta(10,20)\n\n[1] 70\n\n\né diferente de\n\nf_conta(20,10)\n\n[1] 50"
  },
  {
    "objectID": "comecando_r.html#como-obter-ajuda-no-r",
    "href": "comecando_r.html#como-obter-ajuda-no-r",
    "title": "5  Primeiros passos no R",
    "section": "5.13 Como obter ajuda no R",
    "text": "5.13 Como obter ajuda no R\nListamos aqui 3 maneiras para buscar ajuda no R:\n\nHelp/documentação do R (comandos help(nome_da_funcao) ou ?nome_da_funcao). Como exemplo,\n\n\nhelp(mean) #ou\n?mean\n\n\nGoogle Na Figura @ref(fig:help) está o exemplo de busca de ajuda no Google. Repare no ‘r’ no início da busca, isso pode ajudar.\n\n\n\n\n\n\nPesquisa no Google\n\n\n\n\n\nComunidade O Stack Overflow e o Stack Overflow em Português são sites de Pergunta e Resposta amplamente utilizados por todas as linguagens de programação, e o R é uma delas."
  },
  {
    "objectID": "comecando_r.html#pacotes",
    "href": "comecando_r.html#pacotes",
    "title": "5  Primeiros passos no R",
    "section": "5.14 Pacotes",
    "text": "5.14 Pacotes\nComo dito quando falamos “Sobre o R”, o R apresenta funções na sua base e também em forma de pacotes (conjunto de funções bem documentado), que precisam ser instalados (uma vez no seu computador) e carregados na sessão de utilização do R (carregado em toda sessão aberta).\nDificilmente você vai fazer uma análise apenas com as funções básicas do R e dificilmente não vai existir um pacote com as funções que você precisa. Por esse motivo, falamos a seguir em como instalar e carregar pacotes.\n\n5.14.1 Instalação de pacotes\n\nVia CRAN:\n\n\ninstall.packages(\"nome-do-pacote\")\n\nExemplo: Instalação do pacote dplyr.\n\ninstall.packages(\"dplyr\")\n\nNote que o nome do pacote está entre aspas.\n\nVia Github: Para instalar via Github, precisa primeiramente instalar o pacote devtools.\n\n\ndevtools::install_github(\"nome-do-repo/nome-do-pacote\")\n\nExemplo:\n\ndevtools::install_github(\"tidyverse/dplyr\")\n\n\n\n5.14.2 Carregar pacotes\nUma vez que um pacote de interesse está instalado em sua máquina, para carregá-lo na sessão atual do R é só rodar a seguinte linha de comando:\n\nlibrary(nome-do-pacote)\n\nVeja que para carregar o pacote não se usa aspas.\nComo exemplo, o carregamento do pacote dplyr:\n\nlibrary(dplyr)\n\nSó é necessário instalar o pacote uma vez, mas é necessário carregá-lo toda vez que começar uma nova sessão.\nDado que o pacote está carregado ao rodar a função library(), todas as funções desse pacote podem ser usadas sem problemas.\nCaso você não queira carregar o pacote e apenas usar uma função específica do pacote, você pode usar nome-do-pacote::nome-da-funcao. Por exemplo:\n\ndplyr::distinct(...)\n\nSe você tivesse carregado o pacote dplyr anteriormente (pela função library()), não seria necessário colocar dplyr:: antes da função distinct do pacote."
  },
  {
    "objectID": "comecando_r.html#materiais-complementares",
    "href": "comecando_r.html#materiais-complementares",
    "title": "5  Primeiros passos no R",
    "section": "5.15 Materiais complementares",
    "text": "5.15 Materiais complementares\n\nCritical Thinking in Clinical Research. Felipe Fregni & Ben M. W. Illigens. 2018.\nSites:\n\nhttps://www.bmj.com/about-bmj/resources-readers/publications/statistics-square-one/1-data-display-and-summary\nhttp://www.sthda.com/english/wiki/statistical-tests-and-assumptions\n\nCHAPTER 3: Selecting the Study Population. In: Critical Thinking in Clinical Research by Felipe Fregni and Ben Illigens. Oxford University Press 2018.\nFandino W. Formulating a good research question: Pearls and pitfalls. Indian J Anaesth. 2019;63(8):611–616. doi:10.4103/ija.IJA_198_19\nRiva JJ, Malik KM, Burnie SJ, Endicott AR, Busse JW. What is your research question? An introduction to the PICOT format for clinicians. J Can Chiropr Assoc. 2012;56(3):167–171.\nExternal validity, generalizability, and knowledge utilization. Ferguson L1. J Nurs Scholarsh. 2004;36(1):16-22.\nPeter M Rothwell; Commentary: External validity of results of randomized trials: disentangling a complex concept, International Journal of Epidemiology, Volume 39, Issue 1, 1 February 2010, Pages 94–96, https://doi.org/10.1093/ije/dyp305"
  }
]